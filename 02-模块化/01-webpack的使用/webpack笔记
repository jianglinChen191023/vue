## webpack的使用
### 1.2. webpack的配置
#### 打包
'webpack ./src/main.js ./dist/bundle.js'
#### 动态的获取路径
// const path = require('path')
'npm init'
    -- package name: (02-webpack的配置): 起一个包的名字(meetwebpack)
    -- 回车...
    -- entry point: (webpack.config.js) index.js
    -- 回车...
    -- 生成 package.json 文件 -完成
    // 配置 package.json 文件
    ```javascript
    {
      "name": "meetwebpack",
      "version": "1.0.0",
      "main": "index.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "webpack"
      },
      "author": "",
      "license": "ISC",
      "description": ""
    }
    ```
    - 执行 'npm run build'
- 局部依赖安装 - 开发依赖
    - 'npm install webpack@3.6.0 --save-dev'
    -  使用局部
        - node_modules/.bin/webpack


- build的指令: 'npm run build'
    - 在package.json中的scripts的脚步执行时,会按照一定的顺序寻找命令对应的位置
        - 1. 首先,寻找 node_modules/.bin 路径中对应的命令
        - 2. 全局中寻找
````
### 1.3. webpack的 loader
#### 1.3.1. css-loader
- 'npm install css-loader --save-dev'
    - 只负责对css文件加载, 不负责解析和加入dom
    - 解析 CSS 文件后，使用 import 加载，并且返回 CSS 代码
#### 1.3.2. style-loader
- 'npm install style-loader --save-dev'
    - 将模块的导出作为样式添加到 DOM 中
#### 1.3.3. 配置文件webpack-config.js
```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.css$/,
        // css-loader 加载css文件
        // style-loader 将样式添加到DOM中
        // 使用多个loader时是从右向左的
        use: [ 'style-loader', 'css-loader' ]
      }
    ]
  }
}
```
#### 编译
- 'npm run build'

#### 1.3.4. 回顾webpack的安装
- 安装 webpack 首先需要安装Node.js, Node.js自带软件包管理工具 npm node packs manager
- 查看自己的node版本
    - 'node -v'
- 全局安装 webpack (这里指定版本号3.6.0, 因为vue cli2依赖该版本)
    - 'npm install webpack@3.6.0 -g'
- 局部安装 webpack
    - '--save-dev'是开放时依赖, 项目打包后不需要继续使用
        - 'npm install webpack@3.6.0 --save-dev'
    - 为什么全局安装后, 还需要局部安装呢
        - 在终端之间执行 webpack 命令, 使用的全局安装的 webpack
        - 当在 package.json 中对应了 scripts 时, 其中包含了 webpack 指令, 那么使用的是局部 webpack

#### 1.3.5. webpack-less 文件的处理
##### 1.3.5.1 安装配置
- 'npm install --save-dev less-loader less'
```javascript
// webpack.config.js
module.exports = {
    ...
    module: {
        rules: [{
            test: /\.less$/,
            use: [{
                loader: "style-loader" // creates style nodes from JS strings
            }, {
                loader: "css-loader" // translates CSS into CommonJS
            }, {
                loader: "less-loader" // compiles Less to CSS
            }]
        }]
    }
};
```
#### 1.3.6. 图片的处理
##### 1.3.6.1 安装配置
- 'npm install --save-dev url-loader'
- 'npm install --save-dev file-loader'
```javascript
// file-loader补充路径
module.exports = {
  output: {
    publicPath: 'dist/'
  }
```

```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.(png|jpg|gif)$/,
        use: [
          {
            loader: 'url-loader',
            options: {
              limit: 8192, // 8kb
              // 图片命名规范
              name: 'img/[name].[hash:8].[ext]'
            }
          }
        ]
      }
    ]
  }
}
```
#### 1.3.7. ES6转ES5
##### 1.3.7.1. 安装配置
env = enviroment 环境
- 'npm install -save-dev babel-loader@7 babel-core babel-preset-es2015'
```javascript
module: {
  rules: [
    {
      test: /\.js$/,
      exclude: /(node_modules|bower_components)/,
      use: {
        loader: 'babel-loader',
        // 选项
        options: {
            // babel-preset-es2015@6.24.1
            presets: ['es2015']
        }
      }
    }
  ]
}
```

### 1.4. webpack配置vue
#### 1.4.1 安装配置
- 'npm install veu -save'

```javascript
module.exports = {
    resolve: {
        alias: {
        'vue$': 'vue/dist/vue.esm.js'
        }
    }
}
```

- 'npm install --save-dev vue-loader vue-template-compiler'
```javascript
module.exports = {
  module: {
    rules: [
      {
        test: /\.vue$/,
        use: {
          loader: 'vue-loader'
        }
      }
    ]
  },
  resolve: {
    extensions: ['.js', '.css', '.vue'],
    alias: {
      'vue$': 'vue/dist/vue.esm.js'
    }
  }
}
```